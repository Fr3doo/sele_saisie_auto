# encryption_utils.py

import os

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.padding import PKCS7

from logger_utils import write_log
from shared_memory_service import SharedMemoryService


class EncryptionService:
    """Service charg√© de chiffrer et d√©chiffrer les donn√©es sensibles."""

    def __init__(
        self,
        log_file: str | None = None,
        shared_memory_service: SharedMemoryService | None = None,
    ) -> None:
        self.log_file = log_file
        self.shared_memory_service = shared_memory_service or SharedMemoryService(
            log_file
        )

    def generer_cle_aes(self, taille_cle: int = 32) -> bytes:
        """G√©n√®re al√©atoirement une cl√© AES.

        Args:
            taille_cle (int): Longueur de la cl√© en octets (32 par d√©faut pour
                AES-256).

        Returns:
            bytes: Cl√© AES g√©n√©r√©e.
        """
        try:
            key = os.urandom(taille_cle)
            write_log("üíÄ Cl√© AES g√©n√©r√©e avec succ√®s.", self.log_file, "CRITICAL")
            return key
        except Exception as e:
            write_log(
                f"‚ùå Erreur lors de la g√©n√©ration de la cl√© AES : {e}",
                self.log_file,
                "ERROR",
            )
            raise

    def chiffrer_donnees(
        self, donnees: str, cle: bytes, taille_bloc: int = 128
    ) -> bytes:
        """Chiffre une cha√Æne de caract√®res avec AES en mode CBC.

        L'initialisation vector (IV) g√©n√©r√© est pr√©fix√© aux donn√©es chiffr√©es
        pour pouvoir √™tre r√©utilis√© lors du d√©chiffrement. Un padding PKCS7 est
        appliqu√© afin d'obtenir une longueur multiple de ``taille_bloc``.

        Args:
            donnees (str): Texte √† chiffrer.
            cle (bytes): Cl√© AES utilis√©e pour le chiffrement.
            taille_bloc (int): Taille du bloc pour le padding PKCS7.
        Returns:
            bytes: IV suivi des donn√©es chiffr√©es.
        """
        try:
            chiffre = Cipher(algorithms.AES(cle), modes.CBC(os.urandom(16)))
            chiffreur = chiffre.encryptor()
            padder = PKCS7(taille_bloc).padder()

            donnees_pad = padder.update(donnees.encode()) + padder.finalize()
            donnees_chiffrees = chiffreur.update(donnees_pad) + chiffreur.finalize()

            write_log("üíÄ Donn√©es chiffr√©es avec succ√®s.", self.log_file, "CRITICAL")
            return chiffre.mode.initialization_vector + donnees_chiffrees
        except Exception as e:
            write_log(
                f"‚ùå Erreur lors du chiffrement des donn√©es : {e}",
                self.log_file,
                "ERROR",
            )
            raise

    def dechiffrer_donnees(
        self, donnees_chiffrees: bytes, cle: bytes, taille_bloc: int = 128
    ) -> str:
        """D√©chiffre un message chiffr√© par :func:`chiffrer_donnees`.

        Les premiers 16 octets doivent correspondre √† l'IV utilis√© lors du
        chiffrement. Le reste des donn√©es est alors d√©chiffr√© puis d√©padd√© √†
        l'aide de PKCS7.

        Args:
            donnees_chiffrees (bytes): IV suivi du texte chiffr√©.
            cle (bytes): Cl√© AES utilis√©e pour le d√©chiffrement.
            taille_bloc (int): Taille de bloc pour le padding PKCS7.

        Returns:
            str: Contenu original d√©chiffr√©.
        """
        try:
            iv = donnees_chiffrees[:16]
            message_chiffre = donnees_chiffrees[16:]

            chiffre = Cipher(algorithms.AES(cle), modes.CBC(iv))
            dechiffreur = chiffre.decryptor()

            donnees_pad = dechiffreur.update(message_chiffre) + dechiffreur.finalize()

            unpadder = PKCS7(taille_bloc).unpadder()
            donnees = unpadder.update(donnees_pad) + unpadder.finalize()

            write_log("üíÄ Donn√©es d√©chiffr√©es avec succ√®s.", self.log_file, "CRITICAL")
            return donnees.decode()
        except Exception as e:
            write_log(
                f"‚ùå Erreur lors du d√©chiffrement des donn√©es : {e}",
                self.log_file,
                "ERROR",
            )
            raise
