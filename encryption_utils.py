# encryption_utils.py

import os
from multiprocessing import Manager
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.padding import PKCS7
from multiprocessing import shared_memory
from logger_utils import write_log

def generer_cle_aes(TAILLE_CLE=32, log_file=None) -> bytes:
    """G√©n√®re al√©atoirement une cl√© AES.

    Args:
        TAILLE_CLE (int): Longueur de la cl√© en octets (32 par d√©faut pour
            AES-256).
        log_file (str, optional): Fichier de log o√π enregistrer les messages.

    Returns:
        bytes: Cl√© AES g√©n√©r√©e.
    """
    try:
        key = os.urandom(TAILLE_CLE)
        write_log("üíÄ Cl√© AES g√©n√©r√©e avec succ√®s.", log_file, "CRITICAL")
        return key
    except Exception as e:
        write_log(f"‚ùå Erreur lors de la g√©n√©ration de la cl√© AES : {e}", log_file, "ERROR")
        raise


def chiffrer_donnees(donnees: str, cle: bytes, TAILLE_BLOC=128, log_file=None) -> bytes:
    """Chiffre une cha√Æne de caract√®res avec AES en mode CBC.

    L'initialisation vector (IV) g√©n√©r√© est pr√©fix√© aux donn√©es chiffr√©es
    pour pouvoir √™tre r√©utilis√© lors du d√©chiffrement. Un padding PKCS7 est
    appliqu√© afin d'obtenir une longueur multiple de ``TAILLE_BLOC``.

    Args:
        donnees (str): Texte √† chiffrer.
        cle (bytes): Cl√© AES utilis√©e pour le chiffrement.
        TAILLE_BLOC (int): Taille du bloc pour le padding PKCS7.
        log_file (str, optional): Fichier de log.

    Returns:
        bytes: IV suivi des donn√©es chiffr√©es.
    """
    try:
        chiffre = Cipher(algorithms.AES(cle), modes.CBC(os.urandom(16)))
        chiffreur = chiffre.encryptor()
        padder = PKCS7(TAILLE_BLOC).padder()

        donnees_pad = padder.update(donnees.encode()) + padder.finalize()
        donnees_chiffrees = chiffreur.update(donnees_pad) + chiffreur.finalize()

        write_log("üíÄ Donn√©es chiffr√©es avec succ√®s.", log_file, "CRITICAL")
        return chiffre.mode.initialization_vector + donnees_chiffrees
    except Exception as e:
        write_log(f"‚ùå Erreur lors du chiffrement des donn√©es : {e}", log_file, "ERROR")
        raise


def stocker_en_memoire_partagee(nom: str, donnees: bytes, log_file=None):
    """Cr√©e un segment de m√©moire partag√©e et y √©crit les ``donnees``.

    Args:
        nom (str): Nom attribu√© au segment cr√©√©.
        donnees (bytes): Valeurs √† √©crire dans la zone partag√©e.
        log_file (str, optional): Fichier de log.

    Returns:
        SharedMemory: L'objet repr√©sentant le segment cr√©√©.
    """
    try:
        memoire = shared_memory.SharedMemory(name=nom, create=True, size=len(donnees))
        memoire.buf[:len(donnees)] = donnees
        write_log(f"üíÄ Donn√©es stock√©es en m√©moire partag√©e avec le nom '{nom}'.", log_file, "CRITICAL")
        return memoire
    except Exception as e:
        write_log(f"‚ùå Erreur lors du stockage en m√©moire partag√©e : {e}", log_file, "ERROR")
        raise


def supprimer_memoire_partagee_securisee(
    memoire: shared_memory.SharedMemory, log_file=None
):
    """Efface et d√©truit un segment de m√©moire partag√©e.

    Le contenu du segment est rempli de z√©ros avant fermeture puis suppression
    d√©finitive.

    Args:
        memoire (shared_memory.SharedMemory): Segment √† nettoyer et supprimer.
        log_file (str, optional): Fichier de log.
    """
    try:
        for i in range(len(memoire.buf)):
            memoire.buf[i] = 0
        memoire.close()
        memoire.unlink()
        write_log("üíÄ M√©moire partag√©e supprim√©e de mani√®re s√©curis√©e.", log_file, "CRITICAL")
    except Exception as e:
        write_log(f"‚ùå Erreur lors de la suppression s√©curis√©e de la m√©moire partag√©e : {e}", log_file, "ERROR")
        raise


def recuperer_de_memoire_partagee(nom: str, taille: int, log_file=None) -> bytes:
    """Lit des octets depuis un segment de m√©moire partag√©e existant.

    Args:
        nom (str): Nom du segment √† ouvrir.
        taille (int): Nombre d'octets √† lire dans ce segment.
        log_file (str, optional): Fichier de log.

    Returns:
        tuple[shared_memory.SharedMemory, bytes]:
            Le segment ouvert ainsi que les donn√©es r√©cup√©r√©es.
    """
    try:
        memoire = shared_memory.SharedMemory(name=nom)
        donnees = bytes(memoire.buf[:taille])
        write_log(f"üíÄ Donn√©es r√©cup√©r√©es depuis la m√©moire partag√©e avec le nom '{nom}'.", log_file, "CRITICAL")
        return memoire, donnees
    except Exception as e:
        write_log(f"‚ùå Erreur lors de la r√©cup√©ration depuis la m√©moire partag√©e : {e}", log_file, "ERROR")
        raise


def dechiffrer_donnees(
    donnees_chiffrees: bytes, cle: bytes, TAILLE_BLOC=128, log_file=None
) -> str:
    """D√©chiffre un message chiffr√© par :func:`chiffrer_donnees`.

    Les premiers 16 octets doivent correspondre √† l'IV utilis√© lors du
    chiffrement. Le reste des donn√©es est alors d√©chiffr√© puis d√©padd√© √†
    l'aide de PKCS7.

    Args:
        donnees_chiffrees (bytes): IV suivi du texte chiffr√©.
        cle (bytes): Cl√© AES utilis√©e pour le d√©chiffrement.
        TAILLE_BLOC (int): Taille de bloc pour le padding PKCS7.
        log_file (str, optional): Fichier de log.

    Returns:
        str: Contenu original d√©chiffr√©.
    """
    try:
        iv = donnees_chiffrees[:16]
        message_chiffre = donnees_chiffrees[16:]

        chiffre = Cipher(algorithms.AES(cle), modes.CBC(iv))
        dechiffreur = chiffre.decryptor()

        donnees_pad = dechiffreur.update(message_chiffre) + dechiffreur.finalize()

        unpadder = PKCS7(TAILLE_BLOC).unpadder()
        donnees = unpadder.update(donnees_pad) + unpadder.finalize()

        write_log("üíÄ Donn√©es d√©chiffr√©es avec succ√®s.", log_file, "CRITICAL")
        return donnees.decode()
    except Exception as e:
        write_log(f"‚ùå Erreur lors du d√©chiffrement des donn√©es : {e}", log_file, "ERROR")
        raise
